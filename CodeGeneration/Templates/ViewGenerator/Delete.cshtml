@using CodeGeneration.Extensions
@using CodeGeneration.Models.Metadata.Sql
@inherits RazorEngine.Templating.TemplateBase<CodeGeneration.Models.Template.TableMetadataTemplateModel>
@{
    var primaryKey = Model.TableMetadata.Columns.FirstOrDefault(c => c.IsPrimaryKey);
}
@@model @(Model.TargetNamespace).@(Model.ModelName)
@@{
    ViewData["Title"] = "Delete @Model.ModelName.ToUpperDelimited()";
}

@@using (Html.BeginForm("Delete", "@Model.ModelName", FormMethod.Post, new { role = "form" }))
{
    <div class="card shadow">
        @@Html.Partial("_MenuNavigationPartial")
        <div class="card-body">
            @@Html.AntiForgeryToken()
            @@Html.HiddenFor(model => model.@Raw(GetValueExpression(primaryKey)))
            @foreach (var columnMetadata in Model.TableMetadata.Columns)
            {
                var propertyAccessor = string.Format("{0}", columnMetadata.ColumnName);
            
                <div class="form-row">
                    <div class="form-group col">
                        <label for="@propertyAccessor">@@Html.DisplayNameFor(model => model.@GetValueExpression(columnMetadata))</label>
                        <input id="@propertyAccessor" name="@propertyAccessor" class="form-control" type="text" value="@(GetModelExpression()).@(GetValueExpression(columnMetadata))" readonly="readonly" />
                    </div>
                </div>
            }
        </div>
        <div class="card-footer">
            <div class="row sm-gutters">
                <div class="col-2">
                    <button type="submit" class="btn btn-block btn-danger">
                        <i class="fas fa-fw fa-trash-alt"></i> Delete @Model.ModelName.ToUpperDelimited()
                    </button>
                </div>
                <div class="col-2">
                    <a href="@Raw(GetUrlExpression("Index", @Model.ModelName))" class="btn btn-block btn-secondary">
                        Cancel
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@functions
{
    static string GetValueExpression(ColumnMetadata columnMetadata)
    {
        return columnMetadata.ColumnName;
    }

    static string GetUrlExpression(string actionName, string modelName)
    {
        return string.Format("@Url.Action(\"{0}\", \"{1}\")", actionName, modelName);
    }

    static string GetModelExpression()
    {
        return "@Model";
    }
}