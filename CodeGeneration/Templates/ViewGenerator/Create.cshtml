@using CodeGeneration.Extensions
@using CodeGeneration.Models.Metadata.Sql
@inherits RazorEngine.Templating.TemplateBase<CodeGeneration.Models.Template.TableMetadataTemplateModel>
@@model @(Model.TargetNamespace).@(Model.ModelName)

@@{
ViewData["Title"] = "Create @Model.ModelName.ToUpperDelimited()";
}

<div class="row justify-content-center">
    <div class="col-12">
        <div class="card">
            <h4 class="card-header bg-dark text-white">Create @Model.ModelName</h4>
            <div class="card-body">
                <form asp-action="Create">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    @foreach (var columnMetadata in Model.TableMetadata.Columns)
                    {
                        var propertyAccessor = string.Format("{0}", columnMetadata.ColumnName);

                        if (columnMetadata.IsPrimaryKey || columnMetadata.IsReadOnly) { continue; }
                        if (columnMetadata.IsForeignKey)
                        {
                            var itemSourceName = string.Format("ViewBag.{0}", columnMetadata.ColumnName.Replace("Id", "List"));
                            <div class="form-group">
                                <label asp-for="@propertyAccessor"></label>
                                <select asp-for="@propertyAccessor" class="form-control" asp-items="@itemSourceName"></select>
                                <span asp-validation-for="@propertyAccessor" class="text-danger"></span>
                            </div>
                        }
                        else if (columnMetadata.IsBooleanType())
                        {
                            <div class="form-check">
                                <input asp-for="@propertyAccessor" /> @@Html.DisplayNameFor(model => model.@GetValueExpression(columnMetadata))
                                <label asp-for="@propertyAccessor" class="form-check-label"></label>
                            </div>
                        }
                        else
                        {
                            <div class="form-group">
                                <label asp-for="@propertyAccessor"></label>
                                <input asp-for="@propertyAccessor" class="form-control" />
                                <span asp-validation-for="@propertyAccessor" class="text-danger"></span>
                            </div>
                        }
                    }
                    <div class="form-group">
                        <button type="submit" class="btn btn-lg btn-block btn-success">
                            <i class="fas fa-save"></i> Save
                        </button>
                    </div>
                    <div class="form-group">
                        <a href="@Raw(GetUrlExpression("Index", Model.ModelName))" class="btn btn-lg btn-block btn-secondary">
                            Cancel
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@functions
{
    static string GetValueExpression(ColumnMetadata columnMetadata)
    {
        return columnMetadata.ColumnName;
    }

    static string GetUrlExpression(string actionName, string modelName)
    {
        return string.Format("@Url.Action(\"{0}\", \"{1}\")", actionName, modelName);
    }
}