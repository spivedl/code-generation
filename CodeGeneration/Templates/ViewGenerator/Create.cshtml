@using CodeGeneration.Extensions
@using CodeGeneration.Models.Metadata.Sql
@inherits RazorEngine.Templating.TemplateBase<CodeGeneration.Models.Template.TableMetadataTemplateModel>
@@model @(Model.TargetNamespace).Domain.@(Model.ModelName)
@@{
    ViewData["Title"] = "Create @Model.ModelName.ToUpperDelimited()";
}

@@using (Html.BeginForm("Create", "@Model.ModelName", FormMethod.Post, new { role = "form" }))
{
    <div class="card shadow">
        @@Html.Partial("_MenuNavigationPartial")
        <div class="card-body">
            @@Html.AntiForgeryToken()
            @@Html.Partial("_ValidationSummary", ViewData.ModelState)
            @foreach (var columnMetadata in Model.TableMetadata.Columns)
            {
                var propertyAccessor = string.Format("{0}", columnMetadata.ColumnName);

                if (columnMetadata.IsPrimaryKey || columnMetadata.IsReadOnly) { continue; }
                if (columnMetadata.IsForeignKey)
                {
                    var itemSourceName = string.Format("ViewBag.{0}", columnMetadata.ColumnName.Replace("Id", "List"));
                    var itemValue = "@item.Value";
                    var itemText = "@item.Text";
                    var label = @propertyAccessor.ToUpperDelimited().Replace("Id", "");
                    <div class="form-row">
                        <div class="form-group col">
                            <label for="@propertyAccessor">@label</label>
                            <select id="@propertyAccessor" name="@propertyAccessor" class="form-control" placeholder="Select a @label..." data-select="true">
                                @@foreach(var item in @itemSourceName)
                                {
                                    <option value="@itemValue">@itemText</option>
                                }
                            </select>
                            @@Html.ValidationMessageFor(model => model.@(GetValueExpression(columnMetadata)), "", new { @@class = "text-danger" })
                        </div>
                    </div>
                }
                else if (columnMetadata.IsBooleanType())
                {
                    <div class="form-row">
                        <div class="form-group col">
                            <div class="form-check checkbox">
                                <input class="form-check-input" type="checkbox" id="@propertyAccessor" name="@propertyAccessor" value="true">
                                <label class="form-check-label" for="@propertyAccessor">
                                    @@Html.DisplayNameFor(model => model.@GetValueExpression(columnMetadata))
                                </label>
                            </div>
                        </div>
                    </div>
                }
                else if (columnMetadata.IsDateTimeType())
                {
                    <div class="form-row">
                        <div class="form-group col">
                            <label for="@propertyAccessor">@@Html.DisplayNameFor(model => model.@GetValueExpression(columnMetadata))</label>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text">
                                        <i class="fas fa-fw fa-calendar-alt" aria-hidden="true"></i>
                                    </span>
                                </div>
                                <input id="@propertyAccessor" name="@propertyAccessor" type="datetime" class="form-control"
                                       data-datepicker="true"
                                       data-date-format="%Y-%m-%d %T"
                                       data-val="true"
                                       data-val-date="The field @propertyAccessor.ToUpperDelimited() must be a date."
                                       data-val-required="The @propertyAccessor.ToUpperDelimited() field is required.">
                                <div class="input-group-append">
                                    <span class="input-group-text btn btn-dark" data-date-now="@propertyAccessor">
                                        <i class="fas fa-fw fa-clock" aria-hidden="true"></i>
                                    </span>
                                </div>
                                <div class="input-group-append">
                                    <span class="input-group-text btn btn-dark" data-date-reset="@propertyAccessor">
                                        <i class="fas fa-fw fa-times" aria-hidden="true"></i>
                                    </span>
                                </div>
                            </div>
                            @@Html.ValidationMessageFor(model => model.@(GetValueExpression(columnMetadata)), "", new { @@class = "text-danger" })
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-row">
                        <div class="form-group col">
                            <label for="@propertyAccessor">@@Html.DisplayNameFor(model => model.@GetValueExpression(columnMetadata))</label>
                            @if (columnMetadata.IsNullable)
                            {
                            <input id="@propertyAccessor" name="@propertyAccessor" class="form-control" type="text"/>
                            }
                            else
                            {
                            <input id="@propertyAccessor" name="@propertyAccessor" class="form-control" type="text" data-val="true" data-val-required="The @propertyAccessor.ToUpperDelimited() field is required."/>
                            @:@@Html.ValidationMessageFor(model => model.@(GetValueExpression(columnMetadata)), "", new { @@class = "text-danger" })
                            }
                        </div>
                    </div>
                }
            }
        </div>
        <div class="card-footer">
            <div class="row sm-gutters">
                <div class="col-2">
                    <button type="submit" class="btn btn-block btn-success">
                        <i class="fas fa-fw fa-save"></i> Save
                    </button>
                </div>
                <div class="col-2">
                    <a href="@Raw(GetUrlExpression("Index", @Model.ModelName))" class="btn btn-block btn-secondary">
                        Cancel
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@functions
{
    static string GetValueExpression(ColumnMetadata columnMetadata)
    {
        return columnMetadata.ColumnName;
    }

    static string GetUrlExpression(string actionName, string modelName)
    {
        return string.Format("@Url.Action(\"{0}\", \"{1}\")", actionName, modelName);
    }
}