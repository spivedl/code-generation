@using CodeGeneration.Extensions
@inherits RazorEngine.Templating.TemplateBase<CodeGeneration.Models.Template.ControllerTemplateModel>
@{
    var repositoryInterface = @Model.ModelName.ToInterfaceName("Repository");
    var repositoryPrivateVariable = @Model.ModelName.ToPrivateVariableName("Repository");
    var repositoryVariable = @Model.ModelName.ToVariableName("Repository");
    var modelParamName = @Model.ModelName.ToVariableName();
    var hasForeignRelations = @Model.ForeignKeyColumns.Any();
}
using System;
using @Model.ModelNamespace;
using @(Model.RootNamespace).Repositories.Interfaces;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;

namespace @Model.TargetNamespace
{
    /// <inheritdoc />
    /// <summary>
    /// Author: @Model.Author
    /// Version: @Model.Version
    /// Create Date: @Model.CreateDate
    /// Description: Auto-generated controller for the @Model.ModelName model.
    /// </summary>
    public class @Model.ClassName : Controller
    {
        private readonly @repositoryInterface @repositoryPrivateVariable;
        @foreach (var columnMetadata in @Model.ForeignKeyColumns)
        {
            var entityName = columnMetadata.ColumnName.Replace("Id", "");
        @:private readonly @entityName.ToInterfaceName("Repository") @entityName.ToPrivateVariableName("Repository");
        }

        public @(Model.ClassName)(@Model.ConstructorParameters)
        {
            @repositoryPrivateVariable = @repositoryVariable;
        @foreach (var columnMetadata in @Model.ForeignKeyColumns)
        {
            var entityName = columnMetadata.ColumnName.Replace("Id","");
            @:@entityName.ToPrivateVariableName("Repository") = @entityName.ToVariableName("Repository");
        }
        }

        @if (hasForeignRelations)
        {
            @:private void PopulateSelectLists()
            @:{
                foreach(var columnMetadata in @Model.ForeignKeyColumns)
                {
                    var entityName = columnMetadata.ColumnName.Replace("Id", "");
                    @:ViewBag.@(entityName)List = @(entityName.ToPrivateVariableName("Repository")).FindAll().ToSelectItems(x => new SelectListItem { Value = x.@(entityName)Id.ToString(), Text = x.Value });
                }
            @:}
        }

        public ActionResult Index()
        {
            return View(@(repositoryPrivateVariable).FindAll());
        }

        public ActionResult Create()
        {
            @if (hasForeignRelations)
            {
            @:PopulateSelectLists();
            }

            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(@Model.ModelName @modelParamName)
        {
            try
            {
                @(repositoryPrivateVariable).Create(@modelParamName);

                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                @if (hasForeignRelations)
                {
                @:PopulateSelectLists();
                }
                ViewData["error"] = ex;

                return View();
            }
        }

        public ActionResult Edit(int id)
        {
            @if (hasForeignRelations)
            {
            @:PopulateSelectLists();
            }

            return View(@(repositoryPrivateVariable).FindOne(id));
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(@Model.ModelName @modelParamName)
        {
            try
            {
                @(repositoryPrivateVariable).Edit(@modelParamName);

                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                @if (hasForeignRelations)
                {
                @:PopulateSelectLists();
                }
                ViewData["error"] = ex;

                return View(@(repositoryPrivateVariable).FindOne(@(modelParamName).@(Model.PrimaryKeyColumn.ColumnName)));
            }
        }

        public ActionResult Delete(int id)
        {
            return View(@(repositoryPrivateVariable).FindOne(id));
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(@Model.ModelName @modelParamName)
        {
            try
            {
                @(repositoryPrivateVariable).Delete(@(modelParamName).@(Model.PrimaryKeyColumn.ColumnName));

                return RedirectToAction(nameof(Index));
            }
            catch (Exception ex)
            {
                ViewData["error"] = ex;
                return View();
            }
        }
    }
}