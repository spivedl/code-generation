@using System
@using System.Linq
@using System.Text
@using CodeGeneration.Extensions
@inherits RazorEngine.Templating.TemplateBase<CodeGeneration.Models.Template.TableMetadataTemplateModel>
@{
    var tableName = Model.TableMetadata.TableName.ToLowerDelimited();
    var modelNameLower = Model.ModelName.ToFirstCharLowerCase();
    var rootNamespace = Model.TargetNamespace.Substring(0, Model.TargetNamespace.IndexOf('.'));
    var modelsNamespace = string.Format("{0}.Models.Domain", rootNamespace);
    var primaryKey = Model.TableMetadata.Columns.FirstOrDefault(c => c.IsPrimaryKey);
    var primaryKeyName = primaryKey != null ? primaryKey.ColumnName : "@(Model.ModelNameLower)Id";
    var primaryKeyNameLower = primaryKeyName.ToFirstCharLowerCase();
}
using System.Collections.Generic;
using System.Data;
using ControlPanel.Infrastructure.Extensions;
using ControlPanel.Infrastructure.Repositories.Interfaces;
using ControlPanel.Infrastructure.Services.Data;
using ControlPanel.Models.Domain;
using ControlPanel.Models.Pagination;
using Dapper;

namespace @(Model.TargetNamespace).Dapper
{
    /// <inheritdoc />
    /// <summary>
    /// Author: @RazorEngineExtensions.Author()
    /// Version: @RazorEngineExtensions.Version()
    /// Create Date: @DateTime.Now.ToString("f")
    /// Description: Auto-generated repository for the @Model.ModelName model.
    /// </summary>
    public class @(Model.ModelName)Repository : I@(Model.ModelName)Repository
    {
        private readonly IDataService _dataService;

        private IDbConnection Connection => _dataService.GetConnection();

        public @(Model.ModelName)Repository(IDataService dataService)
        {
            _dataService = dataService;
        }

        public @Model.ModelName Create(@Model.ModelName @modelNameLower)
        {
            const string sql = @@"@Raw(GenerateInsertSql(@Model))";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                @(modelNameLower).@(primaryKeyName) = connection.QuerySingle<int>(
                    sql,
                    new
                    {
                    @foreach(var columnMetadata in @Model.TableMetadata.Columns)
                    {
                        if (columnMetadata.IsPrimaryKey || columnMetadata.IsReadOnly) { continue; }
                        @:@(modelNameLower).@(columnMetadata.ColumnName),
                    }
                    },
                    commandType: CommandType.Text);

                return @modelNameLower;
            }
        }

        public @Model.ModelName Edit(@Model.ModelName @modelNameLower)
        {
            const string sql = @@"@Raw(GenerateUpdateSql(@Model))";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                connection.Execute(
                    sql,
                    new
                    {
                    @foreach(var columnMetadata in @Model.TableMetadata.Columns)
                    {
                        if (columnMetadata.IsReadOnly) { continue; }
                        @:@(modelNameLower).@(columnMetadata.ColumnName),
                    }
                    },
                    commandType: CommandType.Text);

                return @modelNameLower;
            }
        }

        public int Delete(int @primaryKeyNameLower)
        {
            const string sql = @@"
DELETE 
FROM [@Model.TableMetadata.SourceDatabase].[@Model.TableMetadata.SourceSchema].[@Model.TableMetadata.TableName]
WHERE [@primaryKeyName] = @@@primaryKeyName;";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                return connection.Execute(sql, new { @primaryKeyName = @primaryKeyNameLower }, commandType: CommandType.Text);
            }
        }

        public int DeleteAll()
        {
            const string sql = @@"DELETE FROM [@Model.TableMetadata.SourceDatabase].[@Model.TableMetadata.SourceSchema].[@Model.TableMetadata.TableName];";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                return connection.Execute(sql, commandType: CommandType.Text);
            }
        }

        public @Model.ModelName FindOne(int @primaryKeyNameLower)
        {
            const string sql = @@"@Raw(GenerateFindSql(@Model, true))";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                return connection.QuerySingle<@Model.ModelName>(sql, new { @primaryKeyName = @primaryKeyNameLower }, commandType: CommandType.Text);
            }
        }

        public IEnumerable<@Model.ModelName> FindAll()
        {
            const string sql = @@"@Raw(GenerateFindSql(@Model, false))";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                return connection.Query<@Model.ModelName>(sql, commandType: CommandType.Text);
            }
        }

        public IEnumerable<@Model.ModelName> Page(Pagination pagination)
        {
            const string sql = @@"@Raw(GeneratePaginationSql(@Model, false))";
    
            var finalSql = pagination.InjectSortParameters(typeof(@Model.ModelName), sql);
            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();
                if (pagination.PageSize == 0) return new List<@Model.ModelName>();

                return connection.Query<@Model.ModelName>(finalSql,
                    new
                    {
                        pagination.PageNumber,
                        pagination.PageSize
                    },
                    commandType: CommandType.Text);
            }
        }

        public IEnumerable<@Model.ModelName> Search(@Model.ModelName searchContext, Pagination pagination)
        {
            const string sql = @@"@Raw(GeneratePaginationSql(@Model, true))";
    
            var finalSql = pagination.InjectSortParameters(typeof(@Model.ModelName), sql);
            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();
                if (pagination.PageSize == 0) return new List<@Model.ModelName>();

                return connection.Query<@Model.ModelName>(finalSql,
                    new
                    {
                        pagination.PageNumber,
                        pagination.PageSize,
                    @foreach(var columnMetadata in @Model.TableMetadata.Columns)
                    {
                        @:searchContext.@(columnMetadata.ColumnName),
                    }
                    },
                    commandType: CommandType.Text);
            }
        }
    }
}
    
@functions {

    static string GenerateInsertSql(CodeGeneration.Models.Template.TableMetadataTemplateModel model)
    {
        var sbSql = new StringBuilder();

        sbSql.AppendFormat("\nINSERT INTO [{0}].[{1}].[{2}]\n(", model.TableMetadata.SourceDatabase, model.TableMetadata.SourceSchema, model.TableMetadata.TableName);

        var firstLine = true;
        foreach (var columnMetadata in model.TableMetadata.Columns)
        {
            if (columnMetadata.IsPrimaryKey || columnMetadata.IsReadOnly) continue;
            if (firstLine)
            {
                sbSql.AppendFormat("\t[{0}]\n", columnMetadata.ColumnName);
            }
            else
            {
                sbSql.AppendFormat("\t, [{0}]\n", columnMetadata.ColumnName);
            }

            firstLine = false;
        }

        sbSql.Append(")\nVALUES\n(");

        firstLine = true;
        foreach (var columnMetadata in model.TableMetadata.Columns)
        {
            if (columnMetadata.IsPrimaryKey || columnMetadata.IsReadOnly) continue;
            if (firstLine)
            {
                sbSql.AppendFormat("\t@{0}\n", columnMetadata.ColumnName);
            }
            else
            {
                sbSql.AppendFormat("\t, @{0}\n", columnMetadata.ColumnName);
            }

            firstLine = false;
        }

        sbSql
        .Append(");\n\n")
        .Append("SELECT CAST(SCOPE_IDENTITY() AS INT);");

        return sbSql.ToString();
    }

    static string GenerateUpdateSql(CodeGeneration.Models.Template.TableMetadataTemplateModel model)
    {
        var sbSql = new StringBuilder();
        var primaryKeyColumn = model.TableMetadata.Columns.FirstOrDefault(c => c.IsPrimaryKey);
        var primaryKeyColumnName = primaryKeyColumn != null ? primaryKeyColumn.ColumnName : string.Format("{0}Id", model.TableMetadata.TableName);
        var hasModifiedDateColumn = model.TableMetadata.Columns.Exists(c => c.ColumnName.Equals("ModifiedDate"));

        sbSql.AppendFormat("\nUPDATE [{0}].[{1}].[{2}]\n", model.TableMetadata.SourceDatabase, model.TableMetadata.SourceSchema, model.TableMetadata.TableName);

        var firstLine = true;
        foreach (var columnMetadata in model.TableMetadata.Columns)
        {
            if (columnMetadata.IsPrimaryKey || columnMetadata.IsReadOnly) continue;
            if (firstLine)
            {
                sbSql.AppendFormat("SET [{0}] = @{0}\n", columnMetadata.ColumnName);
            }
            else
            {
                sbSql.AppendFormat("\t, [{0}] = @{0}\n", columnMetadata.ColumnName);
            }

            firstLine = false;
        }

        if (hasModifiedDateColumn) sbSql.Append("\t, [ModifiedDate] = GETDATE()\n");
        sbSql.AppendFormat("WHERE [{0}] = @{0};", primaryKeyColumnName);

        return sbSql.ToString();
    }

    static string GenerateFindSql(CodeGeneration.Models.Template.TableMetadataTemplateModel model, bool isFindOne)
    {
        var sbSql = new StringBuilder();
        var primaryKeyColumn = model.TableMetadata.Columns.FirstOrDefault(c => c.IsPrimaryKey);
        var primaryKeyColumnName = primaryKeyColumn != null ? primaryKeyColumn.ColumnName : string.Format("{0}Id", model.TableMetadata.TableName);

        var firstLine = true;
        foreach (var columnMetadata in model.TableMetadata.Columns)
        {
            if (firstLine)
            {
                sbSql.AppendFormat("\nSELECT [{0}]\n", columnMetadata.ColumnName);
            }
            else
            {
                sbSql.AppendFormat("\t, [{0}]\n", columnMetadata.ColumnName);
            }

            firstLine = false;
        }

        sbSql.AppendFormat("FROM [{0}].[{1}].[{2}]", model.TableMetadata.SourceDatabase, model.TableMetadata.SourceSchema, model.TableMetadata.TableName);

        if (isFindOne) sbSql.AppendFormat("\nWHERE [{0}] = @{0}", primaryKeyColumnName);

        sbSql.Append(";");

        return sbSql.ToString();
    }

    static string GeneratePaginationSql(CodeGeneration.Models.Template.TableMetadataTemplateModel model, bool includeSearchSql)
    {
        var sbSql = new StringBuilder();
        var primaryKeyColumn = model.TableMetadata.Columns.FirstOrDefault(c => c.IsPrimaryKey);
        var primaryKeyColumnName = primaryKeyColumn != null ? primaryKeyColumn.ColumnName : string.Format("{0}Id", model.TableMetadata.TableName);
        var fqTableName = string.Format("[{0}].[{1}].[{2}]", model.TableMetadata.SourceDatabase, model.TableMetadata.SourceSchema, model.TableMetadata.TableName);
        var firstLine = true;

        #region FILTER SQL

        sbSql.Append("\n;WITH _filter AS\n(\n");

        foreach(var columnMetadata in model.TableMetadata.Columns)
        {
            if (firstLine)
            {
                sbSql.AppendFormat("\tSELECT [{0}]\n", columnMetadata.ColumnName);
                firstLine = false;
            }
            else
            {
                sbSql.AppendFormat("\t\t, [{0}]\n", columnMetadata.ColumnName);
            }
        }
        sbSql.AppendFormat("\tFROM {0} \n", fqTableName);

        if (includeSearchSql)
        {
            firstLine = true;
            foreach (var columnMetadata in model.TableMetadata.Columns)
            {
                if (columnMetadata.IsPrimaryKey) continue;
                if (firstLine)
                {
                    if (columnMetadata.MaxLength > 0)
                    {
                        sbSql.AppendFormat("\tWHERE (@{0} IS NULL OR [{0}] LIKE '%' + @{0} + '%')\n", columnMetadata.ColumnName);
                    }
                    else
                    {
                        sbSql.AppendFormat("\tWHERE (@{0} IS NULL OR [{0}] = @{0})\n", columnMetadata.ColumnName);
                    }
                }
                else
                {
                    if (columnMetadata.MaxLength > 0)
                    {
                        sbSql.AppendFormat("\t\tAND (@{0} IS NULL OR [{0}] LIKE '%' + @{0} + '%')\n", columnMetadata.ColumnName);
                    }
                    else
                    {
                        sbSql.AppendFormat("\t\tAND (@{0} IS NULL OR [{0}] = @{0})\n", columnMetadata.ColumnName);
                    }
                }

                firstLine = false;
            }
        }

        #endregion

        #region SELECT/PAGE SQL

        sbSql.Append(")\n");
        sbSql.Append("SELECT (SELECT COUNT(*) FROM _filter) AS [TotalItems]\n");
        foreach (var columnMetadata in model.TableMetadata.Columns)
        {
            sbSql.AppendFormat("\t, [{0}]\n", columnMetadata.ColumnName);
        }
        sbSql
            .Append("FROM _filter\n")
            .Append("ORDER BY @SortExpression @SortDirection\n")
            .Append("OFFSET @PageSize * (@PageNumber - 1) ROWS\n")
            .Append("FETCH NEXT @PageSize ROWS ONLY;");
        #endregion

        return sbSql.ToString();
    }
}