@using System
@using System.Linq
@using CodeGeneration.Extensions
@inherits RazorEngine.Templating.TemplateBase<CodeGeneration.Models.Template.TableMetadataTemplateModel>
@{
    var tableName = Model.TableMetadata.TableName;
    var modelNameLower = Model.ModelName.ToFirstCharLowerCase();
    var rootNamespace = Model.TargetNamespace.Substring(0, Model.TargetNamespace.IndexOf('.'));
    var modelsNamespace = string.Format("{0}.Models.Domain", rootNamespace);
    var primaryKey = Model.TableMetadata.Columns.FirstOrDefault(c => c.IsPrimaryKey);
    var primaryKeyName = primaryKey != null ? primaryKey.ColumnName : "@(Model.ModelNameLower)Id";
    var primaryKeyNameLower = primaryKeyName.ToFirstCharLowerCase();
}
using System.Collections.Generic;
using System.Data;
using Dapper;
using @modelsNamespace;
using @(Model.TargetNamespace).Interfaces;
using @(rootNamespace).Services.Data;

namespace @(Model.TargetNamespace).Dapper
{
    /// <inheritdoc />
    /// <summary>
    /// Author: @RazorEngineExtensions.Author()
    /// Version: @RazorEngineExtensions.Version()
    /// Create Date: @DateTime.Now.ToString("f")
    /// Description: Auto-generated repository for the @Model.ModelName model.
    /// </summary>
    public class @(Model.ModelName)Repository : I@(Model.ModelName)Repository
    {
        private readonly IDataService _dataService;

        private IDbConnection Connection => _dataService.GetConnection("@Model.SourceConnectionKey");

        public @(Model.ModelName)Repository(IDataService dataService)
        {
            _dataService = dataService;
        }

        public @Model.ModelName Create(@Model.ModelName @modelNameLower)
        {
            const string storedProcedure = @@"[main].[sp_insert_@tableName]";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                @(modelNameLower).@(primaryKeyName) = connection.QuerySingle<int>(
                    storedProcedure,
                    new
                    {
                    @foreach(var columnMetadata in @Model.TableMetadata.Columns)
                    {
                        if (columnMetadata.IsPrimaryKey || columnMetadata.IsReadOnly) { continue; }
                        @:@(modelNameLower).@(columnMetadata.ColumnName),
                    }
                    },
                    commandType: CommandType.StoredProcedure);

                return @modelNameLower;
            }
        }

        public @Model.ModelName Edit(@Model.ModelName @modelNameLower)
        {
            const string storedProcedure = @@"[main].[sp_update_@tableName]";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                connection.Execute(
                    storedProcedure,
                    new
                    {
                    @foreach(var columnMetadata in @Model.TableMetadata.Columns)
                    {
                        if (columnMetadata.IsReadOnly) { continue; }
                        @:@(modelNameLower).@(columnMetadata.ColumnName),
                    }
                    },
                    commandType: CommandType.StoredProcedure);

                return @modelNameLower;
            }
        }

        public int Delete(int @primaryKeyNameLower)
        {
            const string storedProcedure = @@"[main].[sp_delete_@tableName]";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                return connection.Execute(storedProcedure, new { @primaryKeyName = @primaryKeyNameLower }, commandType: CommandType.StoredProcedure);
            }
        }

        public int DeleteAll()
        {
            const string storedProcedure = "[main].[sp_delete_@tableName]";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                return connection.Execute(storedProcedure, commandType: CommandType.StoredProcedure);
            }
        }

        public @Model.ModelName FindOne(int @primaryKeyNameLower)
        {
            const string storedProcedure = @@"[main].[sp_search_@tableName]";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                return connection.QuerySingle<@Model.ModelName>(storedProcedure, new { @primaryKeyName = @primaryKeyNameLower }, commandType: CommandType.StoredProcedure);
            }
        }

        public IEnumerable<@Model.ModelName> FindAll()
        {
            const string storedProcedure = @@"[main].[sp_search_@tableName]";

            using (var connection = Connection)
            {
                if (connection.State != ConnectionState.Open) connection.Open();

                return connection.Query<@Model.ModelName>(storedProcedure, commandType: CommandType.StoredProcedure);
            }
        }
    }
}
